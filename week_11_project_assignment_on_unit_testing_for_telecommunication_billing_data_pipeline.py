# -*- coding: utf-8 -*-
"""Week-11-Project-assignment-on-Unit-Testing-for-Telecommunication-Billing-Data-Pipeline

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HiVGNieETLrmJcRweGYkvso-IkQEGZRh

Below is the starting code that includes the data pipeline functions. You should focus on writing unit tests for these functions using the unittest framework.

##Start code as a guide
"""

import pandas as pd
import unittest

def data_extraction(file_path):
    data = pd.read_csv(file_path)
    return data

def data_transformation(data):
    data = data.drop_duplicates()
    data['billing_amount'] = data['billing_amount'].str.replace('$', '').astype(float)
    data['total_charges'] = data['billing_amount'] + data['tax_amount']
    return data

def data_loading(data, output_file):
    data.to_csv(output_file, index=False)

class TestDataPipeline(unittest.TestCase):
    def test_data_extraction(self):
        # Write your test cases for data_extraction function here

    def test_data_transformation(self):
        # Write your test cases for data_transformation function here

    def test_data_loading(self):
        # Write your test cases for data_loading function here

if __name__ == '__main__':
    unittest.main()

"""## Solution for the project"""

import pandas as pd
import unittest

# Rest of the code...

class TestDataPipeline(unittest.TestCase):
    def setUp(self):
        self.file_path = 'billing_data.csv'
        self.output_file = 'output.csv'
        self.data = pd.read_csv(self.file_path)

    def test_data_extraction(self):
        # Test if data is extracted correctly
        extracted_data = data_extraction(self.file_path)
        self.assertTrue(isinstance(extracted_data, pd.DataFrame))
        self.assertEqual(extracted_data.shape, self.data.shape)

        # Test if extracted data has the expected columns
        expected_columns = ['customer_id', 'billing_amount', 'tax_amount']
        self.assertListEqual(list(extracted_data.columns), expected_columns)

        # Test if the extracted data is not empty
        self.assertFalse(extracted_data.empty)

    def test_data_transformation(self):
        # Test if data is transformed correctly
        transformed_data = data_transformation(self.data)
        self.assertTrue('total_charges' in transformed_data.columns)
        self.assertEqual(transformed_data['total_charges'].dtype, float)
        self.assertEqual(len(transformed_data), len(self.data.drop_duplicates()))

        # Test if billing_amount and tax_amount columns are converted to numeric correctly
        self.assertTrue(pd.api.types.is_numeric_dtype(transformed_data['billing_amount']))
        self.assertTrue(pd.api.types.is_numeric_dtype(transformed_data['tax_amount']))

    def test_data_loading(self):
        # Test if data is loaded and saved correctly
        data_loading(self.data, self.output_file)
        loaded_data = pd.read_csv(self.output_file)
        self.assertTrue(isinstance(loaded_data, pd.DataFrame))
        self.assertEqual(loaded_data.shape, self.data.shape)
        self.assertTrue(loaded_data.equals(self.data))

        # Test if the output file contains the expected columns
        expected_columns = ['customer_id', 'billing_amount', 'tax_amount', 'total_charges']
        self.assertListEqual(list(loaded_data.columns), expected_columns)

        # Test if the loaded data matches the original data
        self.assertTrue(loaded_data.equals(self.data))

if __name__ == '__main__':
    unittest.main()